// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.3
// source: notetypes.proto

package anki

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Notetype_Config_Kind int32

const (
	Notetype_Config_KIND_NORMAL Notetype_Config_Kind = 0
	Notetype_Config_KIND_CLOZE  Notetype_Config_Kind = 1
)

// Enum value maps for Notetype_Config_Kind.
var (
	Notetype_Config_Kind_name = map[int32]string{
		0: "KIND_NORMAL",
		1: "KIND_CLOZE",
	}
	Notetype_Config_Kind_value = map[string]int32{
		"KIND_NORMAL": 0,
		"KIND_CLOZE":  1,
	}
)

func (x Notetype_Config_Kind) Enum() *Notetype_Config_Kind {
	p := new(Notetype_Config_Kind)
	*p = x
	return p
}

func (x Notetype_Config_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Notetype_Config_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_notetypes_proto_enumTypes[0].Descriptor()
}

func (Notetype_Config_Kind) Type() protoreflect.EnumType {
	return &file_notetypes_proto_enumTypes[0]
}

func (x Notetype_Config_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Notetype_Config_Kind.Descriptor instead.
func (Notetype_Config_Kind) EnumDescriptor() ([]byte, []int) {
	return file_notetypes_proto_rawDescGZIP(), []int{0, 0, 0}
}

type Notetype_Config_CardRequirement_Kind int32

const (
	Notetype_Config_CardRequirement_KIND_NONE Notetype_Config_CardRequirement_Kind = 0
	Notetype_Config_CardRequirement_KIND_ANY  Notetype_Config_CardRequirement_Kind = 1
	Notetype_Config_CardRequirement_KIND_ALL  Notetype_Config_CardRequirement_Kind = 2
)

// Enum value maps for Notetype_Config_CardRequirement_Kind.
var (
	Notetype_Config_CardRequirement_Kind_name = map[int32]string{
		0: "KIND_NONE",
		1: "KIND_ANY",
		2: "KIND_ALL",
	}
	Notetype_Config_CardRequirement_Kind_value = map[string]int32{
		"KIND_NONE": 0,
		"KIND_ANY":  1,
		"KIND_ALL":  2,
	}
)

func (x Notetype_Config_CardRequirement_Kind) Enum() *Notetype_Config_CardRequirement_Kind {
	p := new(Notetype_Config_CardRequirement_Kind)
	*p = x
	return p
}

func (x Notetype_Config_CardRequirement_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Notetype_Config_CardRequirement_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_notetypes_proto_enumTypes[1].Descriptor()
}

func (Notetype_Config_CardRequirement_Kind) Type() protoreflect.EnumType {
	return &file_notetypes_proto_enumTypes[1]
}

func (x Notetype_Config_CardRequirement_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Notetype_Config_CardRequirement_Kind.Descriptor instead.
func (Notetype_Config_CardRequirement_Kind) EnumDescriptor() ([]byte, []int) {
	return file_notetypes_proto_rawDescGZIP(), []int{0, 0, 0, 0}
}

type StockNotetype_Kind int32

const (
	StockNotetype_KIND_BASIC                   StockNotetype_Kind = 0
	StockNotetype_KIND_BASIC_AND_REVERSED      StockNotetype_Kind = 1
	StockNotetype_KIND_BASIC_OPTIONAL_REVERSED StockNotetype_Kind = 2
	StockNotetype_KIND_BASIC_TYPING            StockNotetype_Kind = 3
	StockNotetype_KIND_CLOZE                   StockNotetype_Kind = 4
	StockNotetype_KIND_IMAGE_OCCLUSION         StockNotetype_Kind = 5
)

// Enum value maps for StockNotetype_Kind.
var (
	StockNotetype_Kind_name = map[int32]string{
		0: "KIND_BASIC",
		1: "KIND_BASIC_AND_REVERSED",
		2: "KIND_BASIC_OPTIONAL_REVERSED",
		3: "KIND_BASIC_TYPING",
		4: "KIND_CLOZE",
		5: "KIND_IMAGE_OCCLUSION",
	}
	StockNotetype_Kind_value = map[string]int32{
		"KIND_BASIC":                   0,
		"KIND_BASIC_AND_REVERSED":      1,
		"KIND_BASIC_OPTIONAL_REVERSED": 2,
		"KIND_BASIC_TYPING":            3,
		"KIND_CLOZE":                   4,
		"KIND_IMAGE_OCCLUSION":         5,
	}
)

func (x StockNotetype_Kind) Enum() *StockNotetype_Kind {
	p := new(StockNotetype_Kind)
	*p = x
	return p
}

func (x StockNotetype_Kind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StockNotetype_Kind) Descriptor() protoreflect.EnumDescriptor {
	return file_notetypes_proto_enumTypes[2].Descriptor()
}

func (StockNotetype_Kind) Type() protoreflect.EnumType {
	return &file_notetypes_proto_enumTypes[2]
}

func (x StockNotetype_Kind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StockNotetype_Kind.Descriptor instead.
func (StockNotetype_Kind) EnumDescriptor() ([]byte, []int) {
	return file_notetypes_proto_rawDescGZIP(), []int{1, 0}
}

// This is decoupled from Kind to allow us to evolve notetypes over time
// (eg an older notetype might require different JS), and allow us to store
// a type even for notetypes that we don't add by default. Code should not
// assume that the entries here are always +1 from Kind.
type StockNotetype_OriginalStockKind int32

const (
	StockNotetype_ORIGINAL_STOCK_KIND_UNKNOWN                 StockNotetype_OriginalStockKind = 0
	StockNotetype_ORIGINAL_STOCK_KIND_BASIC                   StockNotetype_OriginalStockKind = 1
	StockNotetype_ORIGINAL_STOCK_KIND_BASIC_AND_REVERSED      StockNotetype_OriginalStockKind = 2
	StockNotetype_ORIGINAL_STOCK_KIND_BASIC_OPTIONAL_REVERSED StockNotetype_OriginalStockKind = 3
	StockNotetype_ORIGINAL_STOCK_KIND_BASIC_TYPING            StockNotetype_OriginalStockKind = 4
	StockNotetype_ORIGINAL_STOCK_KIND_CLOZE                   StockNotetype_OriginalStockKind = 5
	StockNotetype_ORIGINAL_STOCK_KIND_IMAGE_OCCLUSION         StockNotetype_OriginalStockKind = 6
)

// Enum value maps for StockNotetype_OriginalStockKind.
var (
	StockNotetype_OriginalStockKind_name = map[int32]string{
		0: "ORIGINAL_STOCK_KIND_UNKNOWN",
		1: "ORIGINAL_STOCK_KIND_BASIC",
		2: "ORIGINAL_STOCK_KIND_BASIC_AND_REVERSED",
		3: "ORIGINAL_STOCK_KIND_BASIC_OPTIONAL_REVERSED",
		4: "ORIGINAL_STOCK_KIND_BASIC_TYPING",
		5: "ORIGINAL_STOCK_KIND_CLOZE",
		6: "ORIGINAL_STOCK_KIND_IMAGE_OCCLUSION",
	}
	StockNotetype_OriginalStockKind_value = map[string]int32{
		"ORIGINAL_STOCK_KIND_UNKNOWN":                 0,
		"ORIGINAL_STOCK_KIND_BASIC":                   1,
		"ORIGINAL_STOCK_KIND_BASIC_AND_REVERSED":      2,
		"ORIGINAL_STOCK_KIND_BASIC_OPTIONAL_REVERSED": 3,
		"ORIGINAL_STOCK_KIND_BASIC_TYPING":            4,
		"ORIGINAL_STOCK_KIND_CLOZE":                   5,
		"ORIGINAL_STOCK_KIND_IMAGE_OCCLUSION":         6,
	}
)

func (x StockNotetype_OriginalStockKind) Enum() *StockNotetype_OriginalStockKind {
	p := new(StockNotetype_OriginalStockKind)
	*p = x
	return p
}

func (x StockNotetype_OriginalStockKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StockNotetype_OriginalStockKind) Descriptor() protoreflect.EnumDescriptor {
	return file_notetypes_proto_enumTypes[3].Descriptor()
}

func (StockNotetype_OriginalStockKind) Type() protoreflect.EnumType {
	return &file_notetypes_proto_enumTypes[3]
}

func (x StockNotetype_OriginalStockKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StockNotetype_OriginalStockKind.Descriptor instead.
func (StockNotetype_OriginalStockKind) EnumDescriptor() ([]byte, []int) {
	return file_notetypes_proto_rawDescGZIP(), []int{1, 1}
}

type Notetype struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name      string               `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MtimeSecs int64                `protobuf:"varint,3,opt,name=mtime_secs,json=mtimeSecs,proto3" json:"mtime_secs,omitempty"`
	Usn       int32                `protobuf:"zigzag32,4,opt,name=usn,proto3" json:"usn,omitempty"`
	Config    *Notetype_Config     `protobuf:"bytes,7,opt,name=config,proto3" json:"config,omitempty"`
	Fields    []*Notetype_Field    `protobuf:"bytes,8,rep,name=fields,proto3" json:"fields,omitempty"`
	Templates []*Notetype_Template `protobuf:"bytes,9,rep,name=templates,proto3" json:"templates,omitempty"`
}

func (x *Notetype) Reset() {
	*x = Notetype{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notetypes_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notetype) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notetype) ProtoMessage() {}

func (x *Notetype) ProtoReflect() protoreflect.Message {
	mi := &file_notetypes_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notetype.ProtoReflect.Descriptor instead.
func (*Notetype) Descriptor() ([]byte, []int) {
	return file_notetypes_proto_rawDescGZIP(), []int{0}
}

func (x *Notetype) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Notetype) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Notetype) GetMtimeSecs() int64 {
	if x != nil {
		return x.MtimeSecs
	}
	return 0
}

func (x *Notetype) GetUsn() int32 {
	if x != nil {
		return x.Usn
	}
	return 0
}

func (x *Notetype) GetConfig() *Notetype_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *Notetype) GetFields() []*Notetype_Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Notetype) GetTemplates() []*Notetype_Template {
	if x != nil {
		return x.Templates
	}
	return nil
}

type StockNotetype struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind StockNotetype_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=anki.notetypes.StockNotetype_Kind" json:"kind,omitempty"`
}

func (x *StockNotetype) Reset() {
	*x = StockNotetype{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notetypes_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockNotetype) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockNotetype) ProtoMessage() {}

func (x *StockNotetype) ProtoReflect() protoreflect.Message {
	mi := &file_notetypes_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockNotetype.ProtoReflect.Descriptor instead.
func (*StockNotetype) Descriptor() ([]byte, []int) {
	return file_notetypes_proto_rawDescGZIP(), []int{1}
}

func (x *StockNotetype) GetKind() StockNotetype_Kind {
	if x != nil {
		return x.Kind
	}
	return StockNotetype_KIND_BASIC
}

type Notetype_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Kind         Notetype_Config_Kind `protobuf:"varint,1,opt,name=kind,proto3,enum=anki.notetypes.Notetype_Config_Kind" json:"kind,omitempty"`
	SortFieldIdx uint32               `protobuf:"varint,2,opt,name=sort_field_idx,json=sortFieldIdx,proto3" json:"sort_field_idx,omitempty"`
	Css          string               `protobuf:"bytes,3,opt,name=css,proto3" json:"css,omitempty"`
	// This is now stored separately; retrieve with DefaultsForAdding()
	TargetDeckIdUnused int64                              `protobuf:"varint,4,opt,name=target_deck_id_unused,json=targetDeckIdUnused,proto3" json:"target_deck_id_unused,omitempty"`
	LatexPre           string                             `protobuf:"bytes,5,opt,name=latex_pre,json=latexPre,proto3" json:"latex_pre,omitempty"`
	LatexPost          string                             `protobuf:"bytes,6,opt,name=latex_post,json=latexPost,proto3" json:"latex_post,omitempty"`
	LatexSvg           bool                               `protobuf:"varint,7,opt,name=latex_svg,json=latexSvg,proto3" json:"latex_svg,omitempty"`
	Reqs               []*Notetype_Config_CardRequirement `protobuf:"bytes,8,rep,name=reqs,proto3" json:"reqs,omitempty"`
	// Only set on notetypes created with Anki 2.1.62+.
	OriginalStockKind StockNotetype_OriginalStockKind `protobuf:"varint,9,opt,name=original_stock_kind,json=originalStockKind,proto3,enum=anki.notetypes.StockNotetype_OriginalStockKind" json:"original_stock_kind,omitempty"`
	// the id in the source collection for imported notetypes (Anki 23.10)
	OriginalId *int64 `protobuf:"varint,10,opt,name=original_id,json=originalId,proto3,oneof" json:"original_id,omitempty"`
	Other      []byte `protobuf:"bytes,255,opt,name=other,proto3" json:"other,omitempty"`
}

func (x *Notetype_Config) Reset() {
	*x = Notetype_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notetypes_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notetype_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notetype_Config) ProtoMessage() {}

func (x *Notetype_Config) ProtoReflect() protoreflect.Message {
	mi := &file_notetypes_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notetype_Config.ProtoReflect.Descriptor instead.
func (*Notetype_Config) Descriptor() ([]byte, []int) {
	return file_notetypes_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Notetype_Config) GetKind() Notetype_Config_Kind {
	if x != nil {
		return x.Kind
	}
	return Notetype_Config_KIND_NORMAL
}

func (x *Notetype_Config) GetSortFieldIdx() uint32 {
	if x != nil {
		return x.SortFieldIdx
	}
	return 0
}

func (x *Notetype_Config) GetCss() string {
	if x != nil {
		return x.Css
	}
	return ""
}

func (x *Notetype_Config) GetTargetDeckIdUnused() int64 {
	if x != nil {
		return x.TargetDeckIdUnused
	}
	return 0
}

func (x *Notetype_Config) GetLatexPre() string {
	if x != nil {
		return x.LatexPre
	}
	return ""
}

func (x *Notetype_Config) GetLatexPost() string {
	if x != nil {
		return x.LatexPost
	}
	return ""
}

func (x *Notetype_Config) GetLatexSvg() bool {
	if x != nil {
		return x.LatexSvg
	}
	return false
}

func (x *Notetype_Config) GetReqs() []*Notetype_Config_CardRequirement {
	if x != nil {
		return x.Reqs
	}
	return nil
}

func (x *Notetype_Config) GetOriginalStockKind() StockNotetype_OriginalStockKind {
	if x != nil {
		return x.OriginalStockKind
	}
	return StockNotetype_ORIGINAL_STOCK_KIND_UNKNOWN
}

func (x *Notetype_Config) GetOriginalId() int64 {
	if x != nil && x.OriginalId != nil {
		return *x.OriginalId
	}
	return 0
}

func (x *Notetype_Config) GetOther() []byte {
	if x != nil {
		return x.Other
	}
	return nil
}

type Notetype_Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ord    *UInt32                `protobuf:"bytes,1,opt,name=ord,proto3" json:"ord,omitempty"`
	Name   string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Config *Notetype_Field_Config `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *Notetype_Field) Reset() {
	*x = Notetype_Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notetypes_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notetype_Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notetype_Field) ProtoMessage() {}

func (x *Notetype_Field) ProtoReflect() protoreflect.Message {
	mi := &file_notetypes_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notetype_Field.ProtoReflect.Descriptor instead.
func (*Notetype_Field) Descriptor() ([]byte, []int) {
	return file_notetypes_proto_rawDescGZIP(), []int{0, 1}
}

func (x *Notetype_Field) GetOrd() *UInt32 {
	if x != nil {
		return x.Ord
	}
	return nil
}

func (x *Notetype_Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Notetype_Field) GetConfig() *Notetype_Field_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type Notetype_Template struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ord       *UInt32                   `protobuf:"bytes,1,opt,name=ord,proto3" json:"ord,omitempty"`
	Name      string                    `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	MtimeSecs int64                     `protobuf:"varint,3,opt,name=mtime_secs,json=mtimeSecs,proto3" json:"mtime_secs,omitempty"`
	Usn       int32                     `protobuf:"zigzag32,4,opt,name=usn,proto3" json:"usn,omitempty"`
	Config    *Notetype_Template_Config `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *Notetype_Template) Reset() {
	*x = Notetype_Template{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notetypes_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notetype_Template) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notetype_Template) ProtoMessage() {}

func (x *Notetype_Template) ProtoReflect() protoreflect.Message {
	mi := &file_notetypes_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notetype_Template.ProtoReflect.Descriptor instead.
func (*Notetype_Template) Descriptor() ([]byte, []int) {
	return file_notetypes_proto_rawDescGZIP(), []int{0, 2}
}

func (x *Notetype_Template) GetOrd() *UInt32 {
	if x != nil {
		return x.Ord
	}
	return nil
}

func (x *Notetype_Template) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Notetype_Template) GetMtimeSecs() int64 {
	if x != nil {
		return x.MtimeSecs
	}
	return 0
}

func (x *Notetype_Template) GetUsn() int32 {
	if x != nil {
		return x.Usn
	}
	return 0
}

func (x *Notetype_Template) GetConfig() *Notetype_Template_Config {
	if x != nil {
		return x.Config
	}
	return nil
}

type Notetype_Config_CardRequirement struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CardOrd   uint32                               `protobuf:"varint,1,opt,name=card_ord,json=cardOrd,proto3" json:"card_ord,omitempty"`
	Kind      Notetype_Config_CardRequirement_Kind `protobuf:"varint,2,opt,name=kind,proto3,enum=anki.notetypes.Notetype_Config_CardRequirement_Kind" json:"kind,omitempty"`
	FieldOrds []uint32                             `protobuf:"varint,3,rep,packed,name=field_ords,json=fieldOrds,proto3" json:"field_ords,omitempty"`
}

func (x *Notetype_Config_CardRequirement) Reset() {
	*x = Notetype_Config_CardRequirement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notetypes_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notetype_Config_CardRequirement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notetype_Config_CardRequirement) ProtoMessage() {}

func (x *Notetype_Config_CardRequirement) ProtoReflect() protoreflect.Message {
	mi := &file_notetypes_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notetype_Config_CardRequirement.ProtoReflect.Descriptor instead.
func (*Notetype_Config_CardRequirement) Descriptor() ([]byte, []int) {
	return file_notetypes_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *Notetype_Config_CardRequirement) GetCardOrd() uint32 {
	if x != nil {
		return x.CardOrd
	}
	return 0
}

func (x *Notetype_Config_CardRequirement) GetKind() Notetype_Config_CardRequirement_Kind {
	if x != nil {
		return x.Kind
	}
	return Notetype_Config_CardRequirement_KIND_NONE
}

func (x *Notetype_Config_CardRequirement) GetFieldOrds() []uint32 {
	if x != nil {
		return x.FieldOrds
	}
	return nil
}

type Notetype_Field_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sticky            bool   `protobuf:"varint,1,opt,name=sticky,proto3" json:"sticky,omitempty"`
	Rtl               bool   `protobuf:"varint,2,opt,name=rtl,proto3" json:"rtl,omitempty"`
	FontName          string `protobuf:"bytes,3,opt,name=font_name,json=fontName,proto3" json:"font_name,omitempty"`
	FontSize          uint32 `protobuf:"varint,4,opt,name=font_size,json=fontSize,proto3" json:"font_size,omitempty"`
	Description       string `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`
	PlainText         bool   `protobuf:"varint,6,opt,name=plain_text,json=plainText,proto3" json:"plain_text,omitempty"`
	Collapsed         bool   `protobuf:"varint,7,opt,name=collapsed,proto3" json:"collapsed,omitempty"`
	ExcludeFromSearch bool   `protobuf:"varint,8,opt,name=exclude_from_search,json=excludeFromSearch,proto3" json:"exclude_from_search,omitempty"`
	// used for merging notetypes on import (Anki 23.10)
	Id *int64 `protobuf:"varint,9,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// Can be used to uniquely identify required fields.
	Tag             *uint32 `protobuf:"varint,10,opt,name=tag,proto3,oneof" json:"tag,omitempty"`
	PreventDeletion bool    `protobuf:"varint,11,opt,name=prevent_deletion,json=preventDeletion,proto3" json:"prevent_deletion,omitempty"`
	Other           []byte  `protobuf:"bytes,255,opt,name=other,proto3" json:"other,omitempty"`
}

func (x *Notetype_Field_Config) Reset() {
	*x = Notetype_Field_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notetypes_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notetype_Field_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notetype_Field_Config) ProtoMessage() {}

func (x *Notetype_Field_Config) ProtoReflect() protoreflect.Message {
	mi := &file_notetypes_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notetype_Field_Config.ProtoReflect.Descriptor instead.
func (*Notetype_Field_Config) Descriptor() ([]byte, []int) {
	return file_notetypes_proto_rawDescGZIP(), []int{0, 1, 0}
}

func (x *Notetype_Field_Config) GetSticky() bool {
	if x != nil {
		return x.Sticky
	}
	return false
}

func (x *Notetype_Field_Config) GetRtl() bool {
	if x != nil {
		return x.Rtl
	}
	return false
}

func (x *Notetype_Field_Config) GetFontName() string {
	if x != nil {
		return x.FontName
	}
	return ""
}

func (x *Notetype_Field_Config) GetFontSize() uint32 {
	if x != nil {
		return x.FontSize
	}
	return 0
}

func (x *Notetype_Field_Config) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Notetype_Field_Config) GetPlainText() bool {
	if x != nil {
		return x.PlainText
	}
	return false
}

func (x *Notetype_Field_Config) GetCollapsed() bool {
	if x != nil {
		return x.Collapsed
	}
	return false
}

func (x *Notetype_Field_Config) GetExcludeFromSearch() bool {
	if x != nil {
		return x.ExcludeFromSearch
	}
	return false
}

func (x *Notetype_Field_Config) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Notetype_Field_Config) GetTag() uint32 {
	if x != nil && x.Tag != nil {
		return *x.Tag
	}
	return 0
}

func (x *Notetype_Field_Config) GetPreventDeletion() bool {
	if x != nil {
		return x.PreventDeletion
	}
	return false
}

func (x *Notetype_Field_Config) GetOther() []byte {
	if x != nil {
		return x.Other
	}
	return nil
}

type Notetype_Template_Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QFormat         string `protobuf:"bytes,1,opt,name=q_format,json=qFormat,proto3" json:"q_format,omitempty"`
	AFormat         string `protobuf:"bytes,2,opt,name=a_format,json=aFormat,proto3" json:"a_format,omitempty"`
	QFormatBrowser  string `protobuf:"bytes,3,opt,name=q_format_browser,json=qFormatBrowser,proto3" json:"q_format_browser,omitempty"`
	AFormatBrowser  string `protobuf:"bytes,4,opt,name=a_format_browser,json=aFormatBrowser,proto3" json:"a_format_browser,omitempty"`
	TargetDeckId    int64  `protobuf:"varint,5,opt,name=target_deck_id,json=targetDeckId,proto3" json:"target_deck_id,omitempty"`
	BrowserFontName string `protobuf:"bytes,6,opt,name=browser_font_name,json=browserFontName,proto3" json:"browser_font_name,omitempty"`
	BrowserFontSize uint32 `protobuf:"varint,7,opt,name=browser_font_size,json=browserFontSize,proto3" json:"browser_font_size,omitempty"`
	// used for merging notetypes on import (Anki 23.10)
	Id    *int64 `protobuf:"varint,8,opt,name=id,proto3,oneof" json:"id,omitempty"`
	Other []byte `protobuf:"bytes,255,opt,name=other,proto3" json:"other,omitempty"`
}

func (x *Notetype_Template_Config) Reset() {
	*x = Notetype_Template_Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_notetypes_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Notetype_Template_Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Notetype_Template_Config) ProtoMessage() {}

func (x *Notetype_Template_Config) ProtoReflect() protoreflect.Message {
	mi := &file_notetypes_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Notetype_Template_Config.ProtoReflect.Descriptor instead.
func (*Notetype_Template_Config) Descriptor() ([]byte, []int) {
	return file_notetypes_proto_rawDescGZIP(), []int{0, 2, 0}
}

func (x *Notetype_Template_Config) GetQFormat() string {
	if x != nil {
		return x.QFormat
	}
	return ""
}

func (x *Notetype_Template_Config) GetAFormat() string {
	if x != nil {
		return x.AFormat
	}
	return ""
}

func (x *Notetype_Template_Config) GetQFormatBrowser() string {
	if x != nil {
		return x.QFormatBrowser
	}
	return ""
}

func (x *Notetype_Template_Config) GetAFormatBrowser() string {
	if x != nil {
		return x.AFormatBrowser
	}
	return ""
}

func (x *Notetype_Template_Config) GetTargetDeckId() int64 {
	if x != nil {
		return x.TargetDeckId
	}
	return 0
}

func (x *Notetype_Template_Config) GetBrowserFontName() string {
	if x != nil {
		return x.BrowserFontName
	}
	return ""
}

func (x *Notetype_Template_Config) GetBrowserFontSize() uint32 {
	if x != nil {
		return x.BrowserFontSize
	}
	return 0
}

func (x *Notetype_Template_Config) GetId() int64 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Notetype_Template_Config) GetOther() []byte {
	if x != nil {
		return x.Other
	}
	return nil
}

var File_notetypes_proto protoreflect.FileDescriptor

var file_notetypes_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6e, 0x6f, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0e, 0x61, 0x6e, 0x6b, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x1a, 0x0d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x83, 0x10, 0x0a, 0x08, 0x4e, 0x6f, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x73, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x75,
	0x73, 0x6e, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x6e, 0x6b, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x61, 0x6e,
	0x6b, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x74,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x6e, 0x6b, 0x69, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x1a, 0xed, 0x05, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x38, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x61, 0x6e, 0x6b, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e,
	0x6f, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x6f, 0x72,
	0x74, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x73, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x64, 0x78, 0x12,
	0x10, 0x0a, 0x03, 0x63, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x73,
	0x73, 0x12, 0x31, 0x0a, 0x15, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x63, 0x6b,
	0x5f, 0x69, 0x64, 0x5f, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x55, 0x6e,
	0x75, 0x73, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x74, 0x65, 0x78, 0x5f, 0x70, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x65, 0x78, 0x50, 0x72,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6c, 0x61, 0x74, 0x65, 0x78, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x61, 0x74, 0x65, 0x78, 0x50, 0x6f, 0x73, 0x74,
	0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x76, 0x67, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x65, 0x78, 0x53, 0x76, 0x67, 0x12, 0x43, 0x0a,
	0x04, 0x72, 0x65, 0x71, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x61, 0x6e,
	0x6b, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x74,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x04, 0x72, 0x65,
	0x71, 0x73, 0x12, 0x5f, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2f, 0x2e, 0x61, 0x6e, 0x6b, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4b, 0x69, 0x6e, 0x64,
	0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x05, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x1a, 0xc8, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x4f, 0x72, 0x64, 0x12,
	0x48, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e,
	0x61, 0x6e, 0x6b, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e,
	0x6f, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4b,
	0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x4f, 0x72, 0x64, 0x73, 0x22, 0x31, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x0d, 0x0a, 0x09, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x4e, 0x59, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x41, 0x4c, 0x4c, 0x10, 0x02, 0x22, 0x27, 0x0a, 0x04, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x0f, 0x0a, 0x0b, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x4e, 0x4f, 0x52, 0x4d,
	0x41, 0x4c, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4c, 0x4f,
	0x5a, 0x45, 0x10, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x69, 0x64, 0x1a, 0xfd, 0x03, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x26,
	0x0a, 0x03, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x6e,
	0x6b, 0x69, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x52, 0x03, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x6e, 0x6b,
	0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4e, 0x6f, 0x74, 0x65,
	0x74, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x1a, 0xf8, 0x02, 0x0a, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x73, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x72, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x72, 0x74, 0x6c, 0x12, 0x1b,
	0x0a, 0x09, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x66,
	0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08,
	0x66, 0x6f, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c,
	0x61, 0x69, 0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x78, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x74, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01, 0x52, 0x03, 0x74, 0x61, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x10, 0x70, 0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x70,
	0x72, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15,
	0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x06, 0x0a, 0x04,
	0x5f, 0x74, 0x61, 0x67, 0x1a, 0xff, 0x03, 0x0a, 0x08, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x26, 0x0a, 0x03, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x61, 0x6e, 0x6b, 0x69, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x2e, 0x55, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x52, 0x03, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a,
	0x0a, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x6d, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65, 0x63, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x73, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x03, 0x75, 0x73, 0x6e, 0x12, 0x40,
	0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x6e, 0x6b, 0x69, 0x2e, 0x6e, 0x6f, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4e, 0x6f, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x1a, 0xc3, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x71,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x71,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x5f, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x71, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x62, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x71, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x42, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x61,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x42, 0x72,
	0x6f, 0x77, 0x73, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x64, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x65, 0x63, 0x6b, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x11, 0x62,
	0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x46,
	0x6f, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x62, 0x72, 0x6f, 0x77, 0x73,
	0x65, 0x72, 0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x62, 0x72, 0x6f, 0x77, 0x73, 0x65, 0x72, 0x46, 0x6f, 0x6e, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65,
	0x72, 0x18, 0xff, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x22, 0x81, 0x04, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x4e, 0x6f, 0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x61, 0x6e, 0x6b, 0x69, 0x2e, 0x6e, 0x6f,
	0x74, 0x65, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4e, 0x6f, 0x74,
	0x65, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x22, 0x96, 0x01, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x4b, 0x49, 0x4e,
	0x44, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x56, 0x45,
	0x52, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x42,
	0x41, 0x53, 0x49, 0x43, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45,
	0x56, 0x45, 0x52, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11, 0x4b, 0x49, 0x4e, 0x44,
	0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x0e, 0x0a, 0x0a, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x5a, 0x45, 0x10, 0x04, 0x12,
	0x18, 0x0a, 0x14, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4f, 0x43,
	0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x22, 0x9e, 0x02, 0x0a, 0x11, 0x4f, 0x72,
	0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x1f, 0x0a, 0x1b, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x43,
	0x4b, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x4f,
	0x43, 0x4b, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12,
	0x2a, 0x0a, 0x26, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x43,
	0x4b, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x44, 0x10, 0x02, 0x12, 0x2f, 0x0a, 0x2b, 0x4f,
	0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4b, 0x49,
	0x4e, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x44, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20,
	0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4b,
	0x49, 0x4e, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x49, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x53,
	0x54, 0x4f, 0x43, 0x4b, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x43, 0x4c, 0x4f, 0x5a, 0x45, 0x10,
	0x05, 0x12, 0x27, 0x0a, 0x23, 0x4f, 0x52, 0x49, 0x47, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x53, 0x54,
	0x4f, 0x43, 0x4b, 0x5f, 0x4b, 0x49, 0x4e, 0x44, 0x5f, 0x49, 0x4d, 0x41, 0x47, 0x45, 0x5f, 0x4f,
	0x43, 0x43, 0x4c, 0x55, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x06, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x2f,
	0x3b, 0x61, 0x6e, 0x6b, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_notetypes_proto_rawDescOnce sync.Once
	file_notetypes_proto_rawDescData = file_notetypes_proto_rawDesc
)

func file_notetypes_proto_rawDescGZIP() []byte {
	file_notetypes_proto_rawDescOnce.Do(func() {
		file_notetypes_proto_rawDescData = protoimpl.X.CompressGZIP(file_notetypes_proto_rawDescData)
	})
	return file_notetypes_proto_rawDescData
}

var file_notetypes_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_notetypes_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_notetypes_proto_goTypes = []any{
	(Notetype_Config_Kind)(0),                 // 0: anki.notetypes.Notetype.Config.Kind
	(Notetype_Config_CardRequirement_Kind)(0), // 1: anki.notetypes.Notetype.Config.CardRequirement.Kind
	(StockNotetype_Kind)(0),                   // 2: anki.notetypes.StockNotetype.Kind
	(StockNotetype_OriginalStockKind)(0),      // 3: anki.notetypes.StockNotetype.OriginalStockKind
	(*Notetype)(nil),                          // 4: anki.notetypes.Notetype
	(*StockNotetype)(nil),                     // 5: anki.notetypes.StockNotetype
	(*Notetype_Config)(nil),                   // 6: anki.notetypes.Notetype.Config
	(*Notetype_Field)(nil),                    // 7: anki.notetypes.Notetype.Field
	(*Notetype_Template)(nil),                 // 8: anki.notetypes.Notetype.Template
	(*Notetype_Config_CardRequirement)(nil),   // 9: anki.notetypes.Notetype.Config.CardRequirement
	(*Notetype_Field_Config)(nil),             // 10: anki.notetypes.Notetype.Field.Config
	(*Notetype_Template_Config)(nil),          // 11: anki.notetypes.Notetype.Template.Config
	(*UInt32)(nil),                            // 12: anki.generic.UInt32
}
var file_notetypes_proto_depIdxs = []int32{
	6,  // 0: anki.notetypes.Notetype.config:type_name -> anki.notetypes.Notetype.Config
	7,  // 1: anki.notetypes.Notetype.fields:type_name -> anki.notetypes.Notetype.Field
	8,  // 2: anki.notetypes.Notetype.templates:type_name -> anki.notetypes.Notetype.Template
	2,  // 3: anki.notetypes.StockNotetype.kind:type_name -> anki.notetypes.StockNotetype.Kind
	0,  // 4: anki.notetypes.Notetype.Config.kind:type_name -> anki.notetypes.Notetype.Config.Kind
	9,  // 5: anki.notetypes.Notetype.Config.reqs:type_name -> anki.notetypes.Notetype.Config.CardRequirement
	3,  // 6: anki.notetypes.Notetype.Config.original_stock_kind:type_name -> anki.notetypes.StockNotetype.OriginalStockKind
	12, // 7: anki.notetypes.Notetype.Field.ord:type_name -> anki.generic.UInt32
	10, // 8: anki.notetypes.Notetype.Field.config:type_name -> anki.notetypes.Notetype.Field.Config
	12, // 9: anki.notetypes.Notetype.Template.ord:type_name -> anki.generic.UInt32
	11, // 10: anki.notetypes.Notetype.Template.config:type_name -> anki.notetypes.Notetype.Template.Config
	1,  // 11: anki.notetypes.Notetype.Config.CardRequirement.kind:type_name -> anki.notetypes.Notetype.Config.CardRequirement.Kind
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_notetypes_proto_init() }
func file_notetypes_proto_init() {
	if File_notetypes_proto != nil {
		return
	}
	file_generic_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_notetypes_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*Notetype); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notetypes_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*StockNotetype); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notetypes_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Notetype_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notetypes_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*Notetype_Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notetypes_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*Notetype_Template); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notetypes_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*Notetype_Config_CardRequirement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notetypes_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*Notetype_Field_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_notetypes_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Notetype_Template_Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_notetypes_proto_msgTypes[2].OneofWrappers = []any{}
	file_notetypes_proto_msgTypes[6].OneofWrappers = []any{}
	file_notetypes_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_notetypes_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_notetypes_proto_goTypes,
		DependencyIndexes: file_notetypes_proto_depIdxs,
		EnumInfos:         file_notetypes_proto_enumTypes,
		MessageInfos:      file_notetypes_proto_msgTypes,
	}.Build()
	File_notetypes_proto = out.File
	file_notetypes_proto_rawDesc = nil
	file_notetypes_proto_goTypes = nil
	file_notetypes_proto_depIdxs = nil
}
