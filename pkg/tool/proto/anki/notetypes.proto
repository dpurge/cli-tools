syntax = "proto3";

option go_package = "./;anki";

package anki.notetypes;

import "generic.proto";

message Notetype {

  message Config {

    enum Kind {
      KIND_NORMAL = 0;
      KIND_CLOZE = 1;
    }
    
    message CardRequirement {
      enum Kind {
        KIND_NONE = 0;
        KIND_ANY = 1;
        KIND_ALL = 2;
      }
      uint32 card_ord = 1;
      Kind kind = 2;
      repeated uint32 field_ords = 3;
    }

    Kind kind = 1;
    uint32 sort_field_idx = 2;
    string css = 3;
    // This is now stored separately; retrieve with DefaultsForAdding()
    int64 target_deck_id_unused = 4;
    string latex_pre = 5;
    string latex_post = 6;
    bool latex_svg = 7;
    repeated CardRequirement reqs = 8;
    // Only set on notetypes created with Anki 2.1.62+.
    StockNotetype.OriginalStockKind original_stock_kind = 9;
    // the id in the source collection for imported notetypes (Anki 23.10)
    optional int64 original_id = 10;

    bytes other = 255;
  }

  message Field {
    message Config {
      bool sticky = 1;
      bool rtl = 2;
      string font_name = 3;
      uint32 font_size = 4;
      string description = 5;
      bool plain_text = 6;
      bool collapsed = 7;
      bool exclude_from_search = 8;
      // used for merging notetypes on import (Anki 23.10)
      optional int64 id = 9;
      // Can be used to uniquely identify required fields.
      optional uint32 tag = 10;
      bool prevent_deletion = 11;

      bytes other = 255;
    }
    generic.UInt32 ord = 1;
    string name = 2;
    Config config = 5;
  }

  message Template {
    message Config {
      string q_format = 1;
      string a_format = 2;
      string q_format_browser = 3;
      string a_format_browser = 4;
      int64 target_deck_id = 5;
      string browser_font_name = 6;
      uint32 browser_font_size = 7;
      // used for merging notetypes on import (Anki 23.10)
      optional int64 id = 8;

      bytes other = 255;
    }

    generic.UInt32 ord = 1;
    string name = 2;
    int64 mtime_secs = 3;
    sint32 usn = 4;
    Config config = 5;
  }

  int64 id = 1;
  string name = 2;
  int64 mtime_secs = 3;
  sint32 usn = 4;
  Config config = 7;
  repeated Field fields = 8;
  repeated Template templates = 9;
}

message StockNotetype {
  enum Kind {
    KIND_BASIC = 0;
    KIND_BASIC_AND_REVERSED = 1;
    KIND_BASIC_OPTIONAL_REVERSED = 2;
    KIND_BASIC_TYPING = 3;
    KIND_CLOZE = 4;
    KIND_IMAGE_OCCLUSION = 5;
  }
  // This is decoupled from Kind to allow us to evolve notetypes over time
  // (eg an older notetype might require different JS), and allow us to store
  // a type even for notetypes that we don't add by default. Code should not
  // assume that the entries here are always +1 from Kind.
  enum OriginalStockKind {
    ORIGINAL_STOCK_KIND_UNKNOWN = 0;
    ORIGINAL_STOCK_KIND_BASIC = 1;
    ORIGINAL_STOCK_KIND_BASIC_AND_REVERSED = 2;
    ORIGINAL_STOCK_KIND_BASIC_OPTIONAL_REVERSED = 3;
    ORIGINAL_STOCK_KIND_BASIC_TYPING = 4;
    ORIGINAL_STOCK_KIND_CLOZE = 5;
    ORIGINAL_STOCK_KIND_IMAGE_OCCLUSION = 6;
  }

  Kind kind = 1;
}